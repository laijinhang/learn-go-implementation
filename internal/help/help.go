package help

import (
	"bufio"
	"bytes"
	"fmt"
	"go/internal/base"
	"html/template"
	"io"
	"strings"
	"unicode"
	"unicode/utf8"
)

// Help函数 实现 帮助命令
func Help(w io.Writer, args []string) {
	// 'go help documentation'命令 生成 doc.go.
	if len(args) == 1 && args[0] == "documentation" {
		fmt.Fprintln(w, "// Copyright 2011 The Go Authors. All rights reserved.")
		fmt.Fprintln(w, "// Use of this source code is governed by a BSD-style")
		fmt.Fprintln(w, "// license that can be found in the LICENSE file.")
		fmt.Fprintln(w)
		fmt.Fprintln(w, "// Code generated by mkalldocs.sh; DO NOT EDIT.")
		fmt.Fprintln(w, "// Edit the documentation in other files and return mkalldocs.sh to generate this one.")
		fmt.Fprintln(w)
		buf := new(bytes.Buffer)
		// 将 base.Go 的内容导入到 buf 中
		PrintUsage(buf, base.Go)
		//usage := &base.Command{Long: buf.String()}
		//cmds := []*base.Command{usage}
	}
}

var usageTemplate = `{{.Long | trim}}

Usage:

	{{.UsageLine}} <command> [arguments]

The commands are:
{{range .Commands}}{{if or (.Runnable) .Commands}}
	{{.Name | printf "%-11s"}} {{.Short}}{{end}}{{end}}

Use "go help{{with .LongName}} {{.}}{{end}} <command>" for more information about a command.
{{if eq (.UsageLine) "go"}}
Additional help topics:
{{range .Commands}}{{if and (not .Runnable) (not .Commands)}}
	{{.Name | printf "%-11s"}} {{.Short}}{{end}}{{end}}

Use "go help{{with .LongName}} {{.}}{{end}} <topic>" for more information about that topic.
{{end}}
`

type errWriter struct {
	w   io.Writer
	err error
}

func (w *errWriter) Write(b []byte) (int, error) {
	n, err := w.w.Write(b)
	if err != nil {
		w.err = err
	}
	return n, nil
}

func tmpl(w io.Writer, text string, data interface{}) {
	t := template.New("top")
	// 设置Funcs，就可以在模板中的{{}}中的action进行使用
	// trim去掉前后空格，capitalize获取utf8第一个
	t.Funcs(template.FuncMap{"trim": strings.TrimSpace, "capitalize": capitalize})
	template.Must(t.Parse(text))
	ew := &errWriter{w: w}
	// Execte方法将解析好的模板写到data上，并将内容输出到wr里
	//如果执行时遇到错误，则会停止执行，但是可能写入了部分信息
	//模板可以并行安全运行
	err := t.Execute(ew, data)
	if ew.err != nil {
		// I/O写入错误。忽略关闭pipe上的写操作。
		// 判断 ew.err.Error() 中是否包含子串 "pipe"
		if strings.Contains(ew.err.Error(), "pipe") {
			// 设置退出状态，协程安全
			base.SetExitStatus(1)
			// 退出时，会先执行 atExitFuncs 里面的所有函数
			base.Exit()
		}
		// 先打印输出内容，设置退出状态 1，然后会执行base.Exit()
		// 相比前面的if的内容，只多了一步 log.Printf("writing output: %v", ew.err) 内容
		base.Fatalf("writing output: %v", ew.err)
	}
	if err != nil {
		panic(err)
	}
}

func capitalize(s string) string {
	if s == "" {
		return s
	}
	// 解码p中的第一个字符，返回解码后的字符和p中被解码的字节数
	r, n := utf8.DecodeRuneInString(s)
	return string(unicode.ToTitle(r)) + s[n:]
}

func PrintUsage(w io.Writer, cmd *base.Command) {
	bw := bufio.NewWriter(w)
	tmpl(w, usageTemplate, cmd)
	bw.Flush()
}
